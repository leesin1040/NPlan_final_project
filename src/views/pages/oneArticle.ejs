<!doctype html>
<html lang="en">
  <head>
    <%-include('../partials/head.ejs') %>
  </head>
  <body>
    <%-include('../partials/header.ejs') %>
    <div class="container" style="width: 1000px">
      <button onclick="window.history.back()" class="btn btn-secondary my-3">뒤로가기</button>
      <div class="card-body">
        <div class="row mt-3">
          <div class="col-8 align-items-center">
            <h2><%= article.articleTitle %></h2>
            &ensp;&ensp;&ensp;
            <p><span class="small text-muted">글쓴이 </span><%= article.writer %></p>
          </div>
          <div class="col d-flex justify-content-end align-items-center">
            <div>
              <p><span class="small text-end">게시물 번호 </span> &ensp; <%= article.id %></p>
              <p><span class="small text-end">조회수 </span> &ensp;<%= article.views %></p>
              <% if (user !== null && article.userId === user.id) { %>
              <button
                type="button"
                onclick="window.location.href='/update/<%= article.id %>'"
                class="btn btn-outline-secondary btn-sm"
              >
                수정
              </button>
              <button
                type="button"
                id="deleteArticleBtn"
                class="btn btn-outline-danger btn-sm"
                data-article-id="<%= article.id %>"
              >
                삭제
              </button>
              <% } %>
            </div>
          </div>
        </div>
        <hr />
        <div style="overflow: hidden"><%- article.editorContent %></div>
        <div class="col d-flex justify-content-center align-items-center my-5">
          <div id="likeButtonContainer">
            <% if (user !== null && isLikedArticle) { %>
              <!-- 좋아요 취소 버튼 -->
              <div class="text-center rounded-circle border border-secondary-subtle" style="width: 100px; height: 100px" onclick="unlikeArticle(<%= article.id %>)">
                <i class="fa-solid fa-heart fa-2xl mt-4 p-3" style="color: red"></i>
                <p class="mt-2"><%= article.likesCount %></p>
              </div>
            <% } else if (user !== null) { %>
              <!-- 좋아요 버튼 -->
              <div class="text-center rounded-circle border border-secondary-subtle" style="width: 100px; height: 100px" onclick="likeArticle(<%= article.id %>)">
                <i class="fa-solid fa-heart fa-2xl mt-4 p-3" style="color: rgb(151, 151, 151)"></i>
                <p class="mt-2"><%= article.likesCount %></p>
              </div>
            <% } else { %>
              <!-- 로그인 요청 버튼 -->
              <div class="text-center rounded-circle border border-secondary-subtle" style="width: 100px; height: 100px" onclick="requestLogin()">
                <i class="fa-solid fa-heart fa-2xl mt-4 p-3" style="color: rgb(151, 151, 151)"></i>
                <p class="mt-2"><%= article.likesCount %></p>
              </div>
            <% } %>
          </div>
          
            
        </div>
        <hr class="my-5" />
        <div class="row">
          <div class="col-2">댓글 작성</div>
          <div class="col-8">
            <input
              type="text"
              id="commentContent"
              class="input-text-comment form-control"
              placeholder="댓글을 작성해주세요"
            />
          </div>
          <div class="col">
            <input type="button" id="commentCreatBtn" class="btn btn-secondary" value="작성하기" />
          </div>
          <hr class="my-4" style="color: #ccc" />
          <!-- 코멘트 영역 -->
<% data.comments.forEach(comment => { %>
  <div class="oneComment">
    <div class="row mb-2">
      <div class="col d-block">
        <img
          class="rounded-circle"
          src="https://media.istockphoto.com/id/1223671392/vector/default-profile-picture-avatar-photo-placeholder-vector-illustration.jpg?s=170667a&w=0&k=20&c=m-F9Doa2ecNYEEjeplkFCmZBlc5tm1pl1F7cBCh9ZzM="
          alt="프로필사진"
          width="20"
          height="20"
        />
        <span><%= comment.userName %></span> <!-- 작성자 이름 혹은 아이디 -->
      </div>
      <div class="col text-end writeDate">
        <p>작성일자 <%= comment.createdAt %></p> <!-- 작성일자 -->
      </div>
    </div>
    <div class="row">
      <div class="col mx-2">
        <p><%= comment.comment %></p> <!-- 코멘트 내용 -->
      </div>
    </div>
    <div class="row">
      <div class="col text-end">
        <button type="button" id="updateComment" class="btn btn-outline-secondary btn-sm" onclick="editComment(<%= comment.commentId %>)">수정</button>
        <button type="button" class="btn btn-outline-danger btn-sm delete-comment-button" data-comment-id="<%= comment.commentId %>">삭제</button>
      </div>
    </div>
  </div>
<% }); %>
<!-- 코멘트 영역 -->
        </div>
      </div>
    </div>

    <script>

window.onload = function(){
  const commentCreatBtn = document.getElementById('commentCreatBtn');
commentCreatBtn.addEventListener('click', createComment);
}

document.addEventListener('DOMContentLoaded', function() {
      // 댓글 삭제 버튼에 대한 이벤트 핸들러 부착
      const deleteButtons = document.querySelectorAll('.delete-comment-button');
      deleteButtons.forEach(button => {
        button.addEventListener('click', async function(event) {
          const commentId = event.target.dataset.commentId;
          // if (confirm("정말로 이 댓글을 삭제하시겠습니까?")) {
          //   await deleteComment(commentId);
          // }
          console.log(commentId, "ㅎㅇ");
        });
      });});

      document.getElementById('deleteArticleBtn').addEventListener('click', function () {
        const articleId = this.getAttribute('data-article-id');
        console.log(articleId);
        if (confirm('이 게시글을 정말 삭제하시겠습니까?')) {
          axios
            .delete(`/api/article/${articleId}`, {
              headers: {
                'Content-Type': 'application/json',
              },
            })
            .then((response) => {
              if (response.status === 200) {
                alert('게시글이 성공적으로 삭제되었습니다.');
                window.location.href = '/articles';
              }
            })
            .catch((error) => {
              console.error('게시글 삭제 실패:', error);
              alert('게시글 삭제에 실패했습니다. 다시 시도해주세요.');
            });
        }
      });
// 전역 변수로 articleId 설정 (페이지에 따라 적절한 값으로 설정 필요)
var articleId = <%= article.id %>;

// 좋아요 요청 함수
async function likeArticle(articleId) {
  try {
    const response = await axios.post(`/api/like/${articleId}`);
    updateLikeButton(response.data.likesCount, true, articleId); // articleId를 인자로 추가
  } catch (error) {
    alert(error.response.data.message);
  }
}

// 좋아요 취소 요청 함수
async function unlikeArticle(articleId) {
  try {
    const response = await axios.delete(`/api/like/${articleId}`);
    updateLikeButton(response.data.likesCount, false, articleId); // articleId를 인자로 추가
  } catch (error) {
    alert(error.response.data.message);
  }
}

// 좋아요 버튼 업데이트 함수
function updateLikeButton(likesCount, isLiked, articleId) { // articleId 파라미터 추가
  const likeButtonHTML = isLiked ?
    `<div class="text-center rounded-circle border border-secondary-subtle" style="width: 100px; height: 100px" onclick="unlikeArticle(${articleId})">
      <i class="fa-solid fa-heart fa-2xl mt-4 p-3" style="color: red"></i>
      <p class="mt-2">${likesCount}</p>
    </div>` :
    `<div class="text-center rounded-circle border border-secondary-subtle" style="width: 100px; height: 100px" onclick="likeArticle(${articleId})">
      <i class="fa-solid fa-heart fa-2xl mt-4 p-3" style="color: rgb(151, 151, 151)"></i>
      <p class="mt-2">${likesCount}</p>
    </div>`;

  document.getElementById('likeButtonContainer').innerHTML = likeButtonHTML;
}

function requestLogin() {
  alert('로그인이 필요한 기능입니다.');
}


//댓글 등록 함수
async function createComment(event) {
  event.preventDefault();
  
  const commentContentValue = document.getElementById('commentContent').value;
  let articleId = window.location.pathname.split('/')[2];
  if (!commentContentValue) {
    alert('댓글을 입력해 주세요.');
    return;
  }

  try {
    let response = await axios.post(`/api/comment/${articleId}`, { comment: commentContentValue });
    alert(response.data.message);
    window.location.reload();
  } catch (error) {
    alert(error.response.data.message);
  }
}

window.onload = function() {
  const commentCreatBtn = document.getElementById('commentCreatBtn');
  commentCreatBtn.addEventListener('click', createComment);
}


//댓글 수정함수 
// async function editComment(commentId) {
//   try {
//     const response = await axios.patch(`/api/comment/${commentId}`, { comment});
//     updateCommentButton(response.data.comment, commentId);
//   } catch (error) {
//     alert(error.response.data.message);
//   }
// }




 // 댓글 삭제 함수
 async function deleteComment(commentId, userId) {
      try {
        const response = await axios.delete(`/api/comment/${commentId}`)
        console.log(commentId);
        alert(response.data.message);
        window.location.reload(); // 댓글 삭제 후 페이지 새로고침
      } catch (error) {
        console.error('댓글 삭제 오류:', error);
        alert('댓글 삭제에 실패했습니다.');
      }
    }
    </script>
    <%-include('../partials/script.ejs') %>
  </body>
</html>
